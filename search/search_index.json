{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GIC Data Engineer Assessment","text":"<p>Transactions exercise</p> <ul> <li>Github gic-de-transactions </li> <li>documentation</li> </ul>"},{"location":"bank_account_interest/","title":"Bank Account","text":"<p>You're designing a simple banking system that handles operations on bank accounts. The system should be capable of the following features:</p> <ul> <li>input banking transactions</li> <li>calculate interest</li> <li>printing account statement</li> </ul> <p>All the example below assumes console input/output is used. </p> <p>When launching the application, it prompts user for actions:</p> <pre><code>Welcome to AwesomeGIC Bank! What would you like to do?\n[T] Input transactions \n[I] Define interest rules\n[P] Print statement\n[Q] Quit\n&gt;\n</code></pre> <p>User should be able to enter <code>T</code> or <code>t</code> to select input transactions menu. Similarly, initial character is used for other options.</p>"},{"location":"bank_account_interest/#input-transactions","title":"Input transactions","text":"<p>Upon selecting Input transactions option, application prompts user for transaction details. <pre><code>Please enter transaction details in &lt;Date&gt; &lt;Account&gt; &lt;Type&gt; &lt;Amount&gt; format \n(or enter blank to go back to main menu):\n&gt;\n</code></pre></p> <p>User is then able to enter something like the following: <pre><code>20230626 AC001 W 100.00\n</code></pre> The system should automatically create the account when the first transaction for the account is created.</p> <p>Some constraints to note: * Date should be in YYYYMMdd format * Account is a string, free format * Type is D for deposit, W for withdrawal, case insensitive * Amount must be greater than zero, decimals are allowed up to 2 decimal places * An account's balance should not be less than 0. Therefore, the first transaction on an account should not be a withdrawal, and any transactions thereafter should not make balance go below 0 * Each transaction should be given a unique id in YYYMMdd-xx format, where xx is a running number (see example below)</p> <p>Then system responds by displaying the statement of the account: (assuming there are already some transactions in the account) <pre><code>Account: AC001\n| Date     | Txn Id      | Type | Amount |\n| 20230505 | 20230505-01 | D    | 100.00 |\n| 20230601 | 20230601-01 | D    | 150.00 |\n| 20230626 | 20230626-01 | W    |  20.00 |\n| 20230626 | 20230626-02 | W    | 100.00 |\n\nIs there anything else you'd like to do?\n[T] Input transactions \n[I] Define interest rules\n[P] Print statement\n[Q] Quit\n&gt;\n</code></pre></p>"},{"location":"bank_account_interest/#define-interest-rule","title":"Define interest rule","text":"<p>Upon selecting Define interest rule option, application prompts user to define interest rules:</p> <pre><code>Please enter interest rules details in &lt;Date&gt; &lt;RuleId&gt; &lt;Rate in %&gt; format \n(or enter blank to go back to main menu):\n&gt;\n</code></pre> <p>User is then able to enter something like the following: <pre><code>20230615 RULE03 2.20\n</code></pre> Some constraints to note: * Date should be in YYYYMMdd format * RuleId is string, free format * Interest rate should be greater than 0 and less than 100 * If there's any existing rules on the same day, the latest one is kept</p> <p>Then system responds by listing all interest rules orderd by date: (assuming there are already RULE01 and RULE02 in the system)  <pre><code>Interest rules:\n| Date     | RuleId | Rate (%) |\n| 20230101 | RULE01 |     1.95 |\n| 20230520 | RULE02 |     1.90 |\n| 20230615 | RULE03 |     2.20 |\n\nIs there anything else you'd like to do?\n[T] Input transactions \n[I] Define interest rules\n[P] Print statement\n[Q] Quit\n&gt;\n</code></pre></p>"},{"location":"bank_account_interest/#print-statement","title":"Print Statement","text":"<p>Upon selecting Print statement option, application prompts user to select which account to print the statement for:</p> <pre><code>Please enter account and month to generate the statement &lt;Account&gt; &lt;Year&gt;&lt;Month&gt;\n(or enter blank to go back to main menu):\n&gt;\n</code></pre> <p>When user enters the account <pre><code>AC001 202306\n</code></pre></p> <p>System then responds with the following account statement, which shows all the transactions and interest for that month (transaction type for interest is I): <pre><code>Account: AC001\n| Date     | Txn Id      | Type | Amount | Balance |\n| 20230601 | 20230601-01 | D    | 150.00 |  250.00 |\n| 20230626 | 20230626-01 | W    |  20.00 |  230.00 |\n| 20230626 | 20230626-02 | W    | 100.00 |  130.00 |\n| 20230630 |             | I    |   0.39 |  130.39 |\n</code></pre></p> <p>How to apply the interest rule: * Interest is applied on end of day balance <pre><code>| Period              | Num of days | EOD Balance | Rate Id | Rate | Annualized Interest      |\n| 20230601 - 20230614 | 14          | 250         | RULE02  | 1.90 | 250 * 1.90% * 14 = 66.50 |\n| 20230615 - 20230625 | 11          | 250         | RULE03  | 2.20 | 250 * 2.20% * 11 = 60.50 |\n| 20230626 - 20230630 |  5          | 130         | RULE03  | 2.20 | 130 * 2.20% *  5 = 14.30 |\n(this table is provided to help you get an idea how the calculation is done, it should not be displayed in the output)\n</code></pre> * Therefore total interest is: (66.50 + 60.50 + 14.30) / 365 = 0.3871 =&gt; 0.39 * The interest is credited at the last day of the month</p>"},{"location":"bank_account_interest/#quit","title":"Quit","text":"<p>When user chooses to quit, user enters: <pre><code>q\n</code></pre></p> <p>System responds with: <pre><code>Thank you for banking with AwesomeGIC Bank.\nHave a nice day!\n</code></pre></p>"},{"location":"cicd/","title":"CICD","text":"<p>Deployment from source code</p>"},{"location":"cicd/#cicd-resources","title":"CICD resources","text":"<ul> <li>Github repository: gic-de-transactions source code storage</li> <li>Github Actions: deployment engine</li> <li>AWS CloudFormation: IaC templates for managing cloud infrastructure on AWS</li> </ul>"},{"location":"cicd/#repository-layout","title":"repository layout","text":"<p>the repository files are organized in the following structure</p> <p>/root <pre><code>.github/\n  workflows/            # github deploy actions\n     ...\naws/                    # specifications for AWS infrastructure\n  cloudformation/       # cloudformation templates\n    ...\ndocs/                   # app documentation\n  ...\n.gitignore\nAGENTS.md               # instructions for Developer AI assistants\nLICENSE\nLOGS.md                 # session logs\nmkdocs.yml              # MKDocs template\nrequirements.txt\nVERSION\n</code></pre></p> <p>excluded files and directories excluded from the source code from <code>.gitignore</code></p> <p>.gitignore <pre><code>env\nsite\n.env\n.pytest_cache*\ns3-gic-transactions*           # local copy of the contents of the S3 directory\n</code></pre></p>"},{"location":"cicd/#s3-bucket-layout","title":"S3 bucket layout","text":"<p>S3 bucket: <code>gic-transactions</code> <pre><code>config/*\n</code></pre></p>"},{"location":"cicd/#github-actions","title":"Github Actions","text":"<p>secrets secrets used by Github Actions runner to authenticate to AWS</p> id variable value description 01 AWS_ACCESS_KEY_ID **** AWS admin credential 02 AWS_SECRET_ACCESS_KEY **** AWS admin credential <p>environment variables environment variables used by Github Actions runner</p> id variable value description 01 AWS_REGION ap-southeast-1 AWS region"},{"location":"cicd/#aws-infrastructure","title":"AWS Infrastructure","text":"<p>The AWS infrastructure is organized into layered CloudFormation stacks, segregated by function and coupled through the repository via parameters and configuration files.</p> <p>CloudFormation (CF) stacks CloudFormation stack layers</p> id stack purpose resources 01 gic-transactions * <p>AWS CLI Additional resources created outside of the cloudformation stack either manually from local PC or via Github actions. </p> <p>These resources must be deleted in a separate cleanup workflow.</p> <p>manual setup resources</p> id resource executor sequence 01 S3 bucket Github Action initial setup"},{"location":"cicd/#cf-stack-deploy","title":"CF Stack deploy","text":"<p>The stack deploy performed by GHA runner includes</p> <ul> <li>parameters read-in/export to S3</li> <li>idempotent deploy checks if the target stack is already in state <code>ROLLBACK_COMPLETE</code> or <code>CREATE_FAIL</code></li> <li>deletes the stack and then triggers a re-deploy</li> <li>fail diagnostics captures diagnostic logs for stack deploy fail and prints out in the runner logs</li> </ul> <p>The stack deploy AWS CLI command includes these standard arguments:</p> argument description <code>--template-file</code> Path to the rendered CFN template the runner will submit. Typically <code>${CF_TEMPLATE_DIR}/${STACK_TEMPLATE_FILE}</code>. <code>--stack-name</code> Logical name of the stack to create/update. Used for change sets, events, and cross-stack exports. <code>--capabilities</code> Required when your template creates/updates IAM resources. <code>CAPABILITY_NAMED_IAM</code> confirms you understand IAM changes with explicit names. <code>--no-fail-on-empty-changeset</code> Makes updates idempotent: if the template/params/tags don\u2019t change, CFN returns an empty change set and the CLI exits successfully instead of erroring. <code>--parameter-overrides</code> Inline key=value pairs that bind to your template\u2019s <code>Parameters</code>. Values here take precedence over any defaults in the template. <code>--tags</code> Key=value pairs to tag the stack (and, for many resource types, the resources). Useful for ownership, cost allocation, and environment scoping. <p>```bash aws cloudformation deploy \\ --template-file $CF_TEMPLATE_DIR/$STACK_TEMPLATE_FILE \\ --stack-name $STACK_NAME \\ --capabilities CAPABILITY_NAMED_IAM \\ --no-fail-on-empty-changeset \\ --parameter-overrides \\   ... --tags \\   role=$ROLE \\   project=$PROJECT_NAME</p> <p>```</p>"},{"location":"cicd/#github-action-workflows","title":"Github Action Workflows","text":"id workflow app feature description 01 cf stack deploy stack *"},{"location":"developer/","title":"Developer Guide","text":""},{"location":"developer/#architecture","title":"Architecture","text":"<p>The application is a small command line program implemented using an object-oriented design.</p> <ul> <li><code>bank/ledger.py</code> \u2013 domain models and the <code>Ledger</code> class that manages accounts, transactions and interest rules. Interest accrual is computed via <code>Ledger.accrue_interest</code> and statements are rendered separately.</li> <li><code>bank/state.py</code> \u2013 persistence helper that saves and loads ledger data from <code>state.json</code>.</li> <li><code>bank/drive.py</code> \u2013 thin wrapper exposing functions used by the UI. All functions return dictionaries with a <code>success</code> flag and optional data or error message.</li> <li><code>bank/ui.py</code> \u2013 interactive command line interface.</li> </ul>"},{"location":"developer/#data-model","title":"Data model","text":"<ul> <li>Account holds a list of <code>Transaction</code> objects.</li> <li>Transaction records <code>date</code>, <code>txn_id</code>, <code>type</code> (<code>D</code>, <code>W</code>, <code>I</code>) and <code>amount</code>.</li> <li>InterestRule defines the interest rate that applies from a given date forward.</li> </ul> <p>State is persisted as JSON in <code>state.json</code> at the project root. <code>Ledger.to_dict()</code> and <code>Ledger.from_dict()</code> serialize and restore the state.</p>"},{"location":"developer/#coding-conventions","title":"Coding conventions","text":"<ul> <li>Only the Python standard library is used.</li> <li>Functions in <code>drive.py</code> return dictionaries of the form <code>{'success': 1, ...}</code> or <code>{'success': -1, 'error': 'message'}</code>.</li> <li>Tests in <code>tests.py</code> use <code>unittest</code>.</li> </ul>"},{"location":"developer/#running-tests","title":"Running tests","text":"<pre><code>pytest tests.py\n</code></pre> <p>Statements are limited to dates up to <code>209912</code> by design to avoid unrealistic future periods.</p>"},{"location":"developer/#logging","title":"Logging","text":"<p>The project is small and relies on return values for error reporting. Additional logging can be added by instrumenting the <code>drive</code> and <code>ledger</code> modules.</p>"},{"location":"guidelines/","title":"Instructions","text":"<p>The solution must fulfil the following criteria:</p> <ul> <li>Good unit tests coverage</li> <li>The simplest solution to the problem</li> <li>Working, clean code</li> </ul> <p>There\u2019s no requirement to build a full-fledged UI, and the solution should not require any kind of database to run. A simple console-based application is sufficient.  Submission may be submitted in Python or any other language of choice.  There must be clear instructions on how to run the code. Submissions without any form of automated testing will not be considered. Please send a zipped file of the source code only (without the compiled binaries). There should not be any executable files in the submission (.dll, .exe, .bat, .sh),</p>"},{"location":"issues/","title":"Issues","text":"<p>issues: bugs, enhancements for the program development</p>"},{"location":"issues/#open","title":"open","text":"<p>open issues</p> id status issue description 04 open month-to-month interest accrual interest is accrued across months with horizon limit"},{"location":"issues/#closed","title":"closed","text":"<p>closed issues</p> <p>| id | status | issue | description | | 02 | closed | convenient entry-point <code>gicbank</code> | use <code>gicbank</code> as entry point instead of <code>python -m bank.ui</code> | | 03 | closed | beg balance | statement doesn't show beginning balance | | 01 | closed | thin test coverage | expanded to ten tests including negative and validation cases |</p>"},{"location":"issues/#issue-details","title":"issue details","text":""},{"location":"issues/#open-04-month-to-month-iterest-accrual","title":"(open) 04 month to month iterest accrual","text":"<p>interest is only calculated for single month but interest on balances is not accrrued to future months. if the statement print-out is in a future month, say <code>202503</code> and meanwhile transactions go as far back as <code>202306</code> Then to accurately reflect the balance as-of <code>202503</code>, when the statement print function is executed from the UI, interest accruals need to be calculated for all balances from <code>202306</code> until <code>202503</code> to accurately reflect the current balance.</p> <p>part of the issue is the conflation of the statement printing with interest accrual in the function <code>ledger.Ledger.statement</code>. suggestion to separately model the statement ledger balance modeling from the statement printing.</p> <p>OK statement for month <code>202306</code> with interest credited at end of month</p> <pre><code>| Date     | Txn Id      | Type | Amount  | Balance  |\n| 20230601 |             | BAL  |    0.00 |     0.00 |\n| 20230601 | 20230601-01 | D    |   50.00 |    50.00 |\n| 20230630 |             | I    |    0.08 |    50.08 |\n</code></pre> <p>X wrong, beginning balance should be <code>50.08</code>, actual <code>50.00</code> - carry forward ending balance from <code>202306</code> with interest accrual</p> <p>statement for month <code>202307</code></p> <pre><code>| Date     | Txn Id      | Type | Amount  | Balance  |\n| 20230701 |             | BAL  |   50.08 |    50.08 |\n| 20230731 |             | I    |    0.09 |    50.17 |\n</code></pre>"},{"location":"user_guide/","title":"User Guide","text":""},{"location":"user_guide/#installation","title":"Installation","text":"<p>This project requires Python 3.8+ and has no external dependencies.</p> <ol> <li>Clone the repository and change into the project directory.</li> <li>(Optional) Create a virtual environment.</li> <li>install the program</li> </ol> <p>add the flag <code>-e</code> for interactive development mode</p> <pre><code>pip install .\n</code></pre> <ol> <li>Run the interactive program:</li> </ol> <pre><code>gicbank\n</code></pre>"},{"location":"user_guide/#usage","title":"Usage","text":"<p>When launched the program displays a menu:</p> <pre><code>Welcome to AwesomeGIC Bank! What would you like to do?\n[T] Input transactions\n[I] Define interest rules\n[P] Print statement\n[Q] Quit\n&gt;\n</code></pre>"},{"location":"user_guide/#t-input-transactions","title":"T: Input transactions","text":"<p>Enter a line with <code>Date Account Type Amount</code>. Example: <pre><code>20230626 AC001 W 100.00\n</code></pre> Type <code>Enter</code> on an empty line to return to the main menu.</p>"},{"location":"user_guide/#i-define-interest-rules","title":"I: Define interest rules","text":"<p>Enter <code>Date RuleId Rate</code>. Example: <pre><code>20230615 RULE03 2.20\n</code></pre> The latest rule on a given date replaces earlier rules. Default account setup is no interest rules is cash account with no interest payments.</p>"},{"location":"user_guide/#p-print-statement","title":"P: Print statement","text":"<p>Enter <code>Account YearMonth</code> to generate a monthly statement including interest. Statements can only be generated up to December 2099 (<code>209912</code>). Example: <pre><code>AC001 202306\n</code></pre> Example statement: <pre><code>| Date     | Txn Id      | Type | Amount | Balance |\n| 20230601 |             | BAL    |    0.00 |     0.00 |\n| 20230601 | 20230601-01 | D    |   50.00 |    50.00 |\n| 20230630 |             | I    |    0.00 |    50.00 |\n</code></pre></p> <p>Interest is automatically accrued at the end of each month and carried forward to future statements.</p>"},{"location":"user_guide/#q-quit","title":"Q: Quit","text":"<p>Enter <code>Q</code> from the main menu.</p>"},{"location":"user_guide/#common-errors","title":"Common errors","text":"<ul> <li>Invalid date format \u2013 Dates must be in <code>YYYYMMDD</code> or <code>YYYYMM</code> format.</li> <li>Insufficient balance \u2013 Withdrawals cannot result in a negative balance.</li> <li>Invalid interest rate \u2013 Rates must be between 0 and 100.</li> </ul>"}]}